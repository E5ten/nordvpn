#!/bin/sh

get_service() {
    systemctl --type=service | grep openvpn-client@nordvpn | awk '{print $1}'
}

run_ping() {
    remote=$(grep -E '^remote [0-9.]+ [0-9]+$' $1 | cut -d ' ' -f 2)
    test ! -z "$remote" || exit 1
    bin=$(which ping)
    test $? -eq 0 || echo "ping not found, please install iputils"
    $bin -c 4 -A $remote | tail -n 1 | cut -d / -f 5
}

progress_bar() {
    pct=$(echo "${1} / ${2}" | bc -l)
    hashes=$(printf "%0.s#" $(seq $(echo "$pct * 73 + 1" | bc )))
    spaces=$(printf "%0.s " $(seq $(echo "(1 - $pct) * 73" | bc)))
    printf "\r%s%s %5.1f%%" "$hashes" "$spaces" "$(echo "$pct * 100" | bc)"
}

end_progress_bar() {
    hashes=$(printf "%0.s#" $(seq 73))
    printf "\r%s 100.0%%\n" "$hashes"
}

update_files() {
    local -i force_update=0
    while [ $# -ne 0 ]
    do
        case "$1" in
            -f|--force)
                force_update=1
                shift
                ;;
            *)
                print_usage
                shift
                ;;
        esac
    done

    local remote_url=https://nordvpn.com/api/files/zipv2

    local targetdir=/etc/openvpn/client/nordvpn
    mkdir -p $targetdir

    local etag_file=$targetdir/etag
    local etag="$(curl -sI $remote_url \
                     | grep etag \
                     | awk '{print $2}' \
                     | tr -d '[:space:]')"
    if [ $force_update -eq 0 ] && [ -r $etag_file ] && [ "$etag" = "$(cat $etag_file)" ]; then
        echo "Current config is up to date."
        exit 0
    fi

    local tmpdir=$(mktemp -d)
    cd $tmpdir

    echo "Downloading nordvpn config files..."
    curl --progress-bar -o nordvpn.zip  $remote_url || exit 1
    if [ "$(md5sum nordvpn.zip | awk '{print $1}')" != "$etag" ]; then
        echo "md5sum(nordvpn.zip) != $etag"
        exit 1
    fi
    mkdir conf
    unzip -q nordvpn.zip -d conf || exit 2

    echo "Patching and installing files..."
    test -f $targetdir/credentials.conf && cp $targetdir/credentials.conf .
    find /etc/openvpn/client -name 'nordvpn_*.conf' | xargs -r rm
    rm -rf $targetdir/conf && mkdir -p $targetdir/conf

    nb_files=$(find conf -name '*.ovpn' | wc -l)
    idx=0
    for f in $(find conf -name '*.ovpn'); do
        progress_bar $idx $nb_files
        sed 's/^auth-user-pass.*$/auth-user-pass \/etc\/openvpn\/client\/nordvpn\/credentials.conf/g' -i $f
        echo "" >> $f
        echo "script-security 2" >> $f
        echo "up /etc/openvpn/client/nordvpn/updown" >> $f
        echo "down /etc/openvpn/client/nordvpn/updown" >> $f
        install -D -m 444 $f $targetdir/conf/$(basename $f)
        local -a tok=($(basename $f | tr '.' ' '))
        ln -s $targetdir/conf/$(basename $f) $targetdir/../nordvpn_${tok[0]}_${tok[3]:0:3}.conf
        idx=$(( $idx + 1 ))
    done
    end_progress_bar

    local cred_file=$targetdir/credentials.conf
    if [ -f credentials.conf ]; then
        cp credentials.conf $cred_file
    else
        echo "login" > $cred_file
        echo "password" >> $cred_file
        chmod 400 $cred_file
        echo "Please update $cred_file"
    fi

    echo "$etag" > $etag_file

    rm -rf $tmpdir
}

print_usage() {
    cat <<EOF
usage: $(basename $0) [options] command [args]
Available options:
    -v, --verbose
        Be verbose, show commands and variables.
    -h, --help
        Print this help and exit.
Available commands:
    list [server_name_pattern]
        List available servers.
    infos [options]
        List available servers with additional information such as current load and features.
        -f, --force
            Force download.
    ping server_name
        Show round trip latency.
    rank [server_name_pattern]
        Ping all servers matching pattern and rank them.
    status
        Show current systemd service status, if any.
    start [options] server_name
        Start systemd service for specified server.
        -t, --tcp
            Use TCP connection instead of UDP.
    stop|restart
        Stop or restart systemd service, if any.
    update [options]
        Download and install nordvpn config files.
        -f, --force
            Force download even if the configuration files have not changed.
EOF
}


while [ $# -ne 0 ]
do
    case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -v|--verbose)
            set -x
            shift
            ;;
        list|infos|ping|rank|status|start|stop|restart|update)
            command="$1"
            shift
            break
            ;;
        --)
            shift
            break
            ;;
        *)
            print_usage
            exit 1
            ;;
    esac
done

if [ $(id -u) -ne 0 ] && [ $command != "status" ]
then
    echo "'nordvpn $command' requires super-user privileges."
    exit 1
fi

if [ $(find /etc/openvpn/client -type f -name "*.nordvpn.com.*.ovpn" | wc -l) -eq 0 ];
then
    echo "No configuration files found. Updating now..."
    update_files -f
fi

case $command in
    list)
        find /etc/openvpn/client/ -type l -name "nordvpn_*${1}*.conf" \
            | xargs -L1 basename \
            | cut -d _ -f 2 \
            | cut -d . -f 1 \
            | sort -g
        ;;
    infos)
        if ! which python 1>/dev/null 2>&1;
        then
            echo "'nordvpn infos' requires python and pandas."
            exit 1
        fi
        declare -i force_update=0
        case "$1" in
            -f|--force)
                force_update=1
                shift
                ;;
        esac
        declare -r servers_filename=/tmp/nordvpn_servers.json
        if [ $force_update -eq 1 ] \
               || [ ! -f $servers_filename ] \
               || [ ! -z "$(find $servers_filename -mmin +15)" ]
        then
            echo "Updating servers list..."
            curl --silent -o $servers_filename https://api.nordvpn.com/server
        fi
        python /etc/openvpn/client/nordvpn/servers.py $servers_filename
        ;;
    ping)
        file="/etc/openvpn/client/nordvpn_${1}_udp.conf"
        test -f "$file" || exit 1
        run_ping $file
        ;;
    rank)
        tmp=$(mktemp)
        for f in $(find /etc/openvpn/client/ -type l -name "nordvpn_*${1}*_udp.conf")
        do
            echo $(basename $f .conf | cut -d _ -f 2) $(run_ping $f) >> $tmp
        done
        sort -k 2 -n $tmp
        rm -f $tmp
        ;;
    status)
        service=$(get_service)
        test -z "$service" || systemctl status $service
        ;;
    start)
        conn_type='udp'
        case "$1" in
            -t|--tcp)
                conn_type='tcp'
                shift
                ;;
        esac
        service=$(get_service)
        updown=/etc/openvpn/client/nordvpn/updown
        test -z "$service" || $0 stop
        if [ -x /etc/openvpn/vpnfailsafe.sh ]; then
            ln -fs /etc/openvpn/vpnfailsafe.sh $updown
        else
            ln -fs /etc/openvpn/update-resolv-conf $updown
        fi
        if [ ! -f /etc/openvpn/client/nordvpn_${1}_${conn_type}.conf ]; then
            echo "${1} is not a valid nordvpn server. Exiting."
            exit 1
        fi
        systemctl $command openvpn-client@nordvpn_${1}_${conn_type}
        ;;
    stop|restart)
        service=$(get_service)
        test -z "$service" || systemctl $command $service
        ;;
    update)
        update_files "$@"
        ;;
    *)
        print_usage
        exit 1
        ;;
esac
